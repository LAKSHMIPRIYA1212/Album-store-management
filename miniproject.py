#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.25.1
#  in conjunction with Tcl version 8.6
#    May 14, 2020 12:15:47 AM IST  platform: Linux

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import miniproject_support
import os.path
from tkinter import messagebox as mb 


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    root = tk.Tk()
    top = Toplevel1 (root)
    miniproject_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    miniproject_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

def logout(self):
	root.destroy()
	import login
	login.vp_start_gui()    

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font10 = "-family {Century Schoolbook L} -size 21 -weight bold"  \
            " -slant roman -underline 0 -overstrike 0"
        font11 = "-family {Noto Serif CJK JP} -size 16 -weight bold "  \
            "-slant italic -underline 0 -overstrike 0"
        font13 = "-family {Century Schoolbook L} -size 10 -weight bold"  \
            " -slant italic -underline 0 -overstrike 0"
        font14 = "-family {Noto Serif CJK JP} -size 11 -weight normal "  \
            "-slant roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1000x600+230+80")
        top.title("Album Book Club ")
        top.configure(background="#bf996d")

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.0, rely=0.0, height=91, width=1009)
        self.Label1.configure(background="#d8ce8a")
        self.Label1.configure(font=font10)
        self.Label1.configure(text='''Album Book Club Management System''')

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.129, rely=0.217, relheight=0.708
                , relwidth=0.274)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="5")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#bf996d")

        self.Label2 = tk.Label(self.Frame1)
        self.Label2.place(relx=0.070, rely=0.020, height=41, width=229)
        self.Label2.configure(background="#f2c583")
        self.Label2.configure(font=font11)
        self.Label2.configure(text='''Book Store''')

        self.Labelframe1 = tk.LabelFrame(top)
        self.Labelframe1.place(relx=0.149, rely=0.333, relheight=0.158
                , relwidth=0.09)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(font=font13)
        self.Labelframe1.configure(text='''View All''')

        self.Labelframe6 = tk.LabelFrame(top)
        self.Labelframe6.place(relx=0.428, rely=0.460, relheight=0.458
                , relwidth=0.448)
        self.Labelframe6.configure(relief='groove')
        self.Labelframe6.configure(text='''Album List''')
        self.Labelframe6.configure(background="#bf996d")

        self.Listbox1 = tk.Listbox(top)
        self.Listbox1.place(relx=0.699, rely=0.500, relheight=0.393
                , relwidth=0.164, bordermode='ignore')
        self.Listbox1.configure(background="white")
        self.Listbox1.configure(borderwidth="5")
        self.Listbox1.configure(font="font9")

        self.Button1 = tk.Button(self.Labelframe1)
        self.Button1.place(relx=0.111, rely=0.211, height=66, width=66
                , bordermode='ignore')
        self.Button1.configure(borderwidth="3")
        photo_location = os.path.join(prog_location,"/home/lakshmi/Documents/mini_project/viewall.png")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.Button1.configure(image=_img0)
        self.Button1.configure(text='''Button''')

        def viewData(self):
            self.Listbox1.delete(0,tk.END)
            flist=os.listdir('/home/lakshmi/Documents/mini_project/bookhouse/')
            for item in flist:
                self.Listbox1.insert(tk.END,item)

        def search(self):
            bookid=self.Entry2.get()+".txt"
            self.Listbox1.delete(0,tk.END)           
            flist=os.listdir('/home/lakshmi/Documents/mini_project/bookhouse/')
            if bookid not in flist:
                mb.showinfo(title="Error",message="Data not found!!")
            else:    

                for list in flist:
                    if list==bookid:                    	
                        self.Listbox1.insert(tk.END,list)
                                   
        def showContent(event):
            x=self.Listbox1.curselection()[0]
            file=self.Listbox1.get(x)
            from os.path import join as pjoin
            pathfile=pjoin("/","home","lakshmi","Documents","mini_project","bookhouse/"+file)
            with open(pathfile,'r') as file:
                file=file.read()

            self.Text1.delete('1.0',tk.END)
            self.Text1.insert(tk.END,file)
        self.Listbox1.bind("<<ListboxSelect>>",showContent)

        self.Button1.configure(command= lambda: viewData(self))
        
        self.Labelframe2 = tk.LabelFrame(top)
        self.Labelframe2.place(relx=0.289, rely=0.333, relheight=0.158
                , relwidth=0.09)
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(font=font13)
        self.Labelframe2.configure(text='''Search''')

        self.Button2 = tk.Button(self.Labelframe2)
        self.Button2.place(relx=0.111, rely=0.211, height=66, width=66
                , bordermode='ignore')
        self.Button2.configure(borderwidth="3")
        photo_location = os.path.join(prog_location,"./Documents/mini_project/searchbook.png")
        global _img1
        _img1 = tk.PhotoImage(file=photo_location)
        self.Button2.configure(image=_img1)
        self.Button2.configure(text='''Button''')
        
        self.Button2.configure(command=lambda : search(self))
                    
        self.Labelframe3 = tk.LabelFrame(top)
        self.Labelframe3.place(relx=0.209, rely=0.733, relheight=0.158
                , relwidth=0.09)
        self.Labelframe3.configure(relief='groove')
        self.Labelframe3.configure(font=font13)
        self.Labelframe3.configure(text='''Delete''')

        self.Button5 = tk.Button(self.Labelframe3)
        self.Button5.place(relx=0.111, rely=0.211, height=70, width=70
                , bordermode='ignore')
        self.Button5.configure(borderwidth="3")
        photo_location = os.path.join(prog_location,"./Documents/mini_project/deletebook.png")
        global _img2
        _img2 = tk.PhotoImage(file=photo_location)
        self.Button5.configure(image=_img2)
        self.Button5.configure(text='''Button''')
        def deleteAlbum(self):
            import os
            delFile=self.Entry2.get()
            os.remove('/home/lakshmi/Documents/mini_project/bookhouse/'+delFile+'.txt')
            print("data deleted")
            mb.showinfo(title="Deta Deletion",message="Data Deleted")
        self.Button5.configure(command=lambda : deleteAlbum(self))

        self.Labelframe4 = tk.LabelFrame(top)
        self.Labelframe4.place(relx=0.149, rely=0.533, relheight=0.158
                , relwidth=0.09)
        self.Labelframe4.configure(relief='groove')
        self.Labelframe4.configure(font=font13)
        self.Labelframe4.configure(text='''Add Book''')

        self.Button3 = tk.Button(self.Labelframe4)
        self.Button3.place(relx=0.111, rely=0.211, height=66, width=66
                , bordermode='ignore')
        self.Button3.configure(borderwidth="3")
        photo_location = os.path.join(prog_location,"./Documents/mini_project/addbook.png")
        global _img3
        _img3 = tk.PhotoImage(file=photo_location)
        self.Button3.configure(image=_img3)
        self.Button3.configure(text='''Button''')
        def writefiles(self):
            Name=self.Entry2.get()
            first=Name[0:10]+".txt"
            from os.path import join as pjoin
            path_to_file=pjoin("/","home","lakshmi","Documents","mini_project","bookhouse",first)
            with open(path_to_file,"w") as wr:
                wr.write("Album Name: "+str(self.Entry4.get())+"\n"+"Edition: "+str(self.Entry3.get())
                    +"\n"+"Album ID: "+str(self.Entry2.get())+"\n"+"Publisher: "+str(self.Entry1.get())
                    +"\n"+"Category: "+str(self.Entry5.get())+"\n")
                print("Your Book is Added")
                mb.showinfo(title="Notification",message="Book ''Added'' Successfullly")
                wr.close()
        self.Button3.configure(command=lambda: writefiles(self))

        self.Labelframe5 = tk.LabelFrame(top)
        self.Labelframe5.place(relx=0.289, rely=0.533, relheight=0.158
                , relwidth=0.09)
        self.Labelframe5.configure(relief='groove')
        self.Labelframe5.configure(font=font13)
        self.Labelframe5.configure(text='''Modify''')

        self.Button4 = tk.Button(self.Labelframe5)
        self.Button4.place(relx=0.111, rely=0.211, height=66, width=66
                , bordermode='ignore')
        self.Button4.configure(borderwidth="3")
        photo_location = os.path.join(prog_location,"./Documents/mini_project/available.png")
        global _img4
        _img4 = tk.PhotoImage(file=photo_location)
        self.Button4.configure(image=_img4)
        self.Button4.configure(text='''Button''')
        def modifyfiles(self):
            Name=self.Entry2.get()
            first=Name[0:10]+".txt"
            from os.path import join as pjoin
            path_to_file=pjoin("/","home","lakshmi","Documents","mini_project","bookhouse",first)
            with open(path_to_file,"w") as wr:
                wr.write("Album Name: "+str(self.Entry4.get())+"\n"+"Edition: "+str(self.Entry3.get())
                    +"\n"+"Album ID: "+str(self.Entry2.get())+"\n"+"Publisher: "+str(self.Entry1.get())
                    +"\n"+"Category: "+str(self.Entry5.get())+"\n")
                print("Your Book is Modified")
                mb.showinfo(title="Notification",message="Book ''Modified'' Successfullly")
                wr.close()
        self.Button4.configure(command=lambda: modifyfiles(self))

        self.Frame2 = tk.Frame(top)
        self.Frame2.place(relx=0.418, rely=0.167, relheight=0.290
                , relwidth=0.463)
        self.Frame2.configure(relief='groove')
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief="groove")
        self.Frame2.configure(background="#bf996d")

        self.Entry1 = tk.Entry(self.Frame2)
        self.Entry1.place(relx=0.344, rely=0.570,height=20, relwidth=0.594)
        self.Entry1.configure(background="white")
        self.Entry1.configure(font="TkFixedFont")

        self.Entry2 = tk.Entry(self.Frame2)
        self.Entry2.place(relx=0.344, rely=0.400,height=20, relwidth=0.594)
        self.Entry2.configure(background="white")
        self.Entry2.configure(font="font11")

        self.Entry3 = tk.Entry(self.Frame2)
        self.Entry3.place(relx=0.344, rely=0.225,height=20, relwidth=0.594)
        self.Entry3.configure(background="white")
        self.Entry3.configure(font="TkFixedFont")

        self.Entry4 = tk.Entry(self.Frame2)
        self.Entry4.place(relx=0.344, rely=0.060,height=20, relwidth=0.594)
        self.Entry4.configure(background="white")
        self.Entry4.configure(font="TkFixedFont")

        self.Entry5 = tk.Entry(self.Frame2)
        self.Entry5.place(relx=0.344, rely=0.770,height=20, relwidth=0.594)
        self.Entry5.configure(background="white")
        self.Entry5.configure(font="TkFixedFont")

        self.Label4 = tk.Label(top)
        self.Label4.place(relx=0.886, rely=0.15, height=511, width=119)
        photo_location = os.path.join(prog_location,"./Documents/mini_project/b1.png")
        global _img5
        _img5 = tk.PhotoImage(file=photo_location)
        self.Label4.configure(image=_img5)
        self.Label4.configure(text='''Label''')

        self.Label5 = tk.Label(top)
        self.Label5.place(relx=0.438, rely=0.233, height=21, width=119)
        self.Label5.configure(text='''Edition  :''')

        self.Label6 = tk.Label(top)
        self.Label6.place(relx=0.0, rely=0.15, height=511, width=119)
        photo_location = os.path.join(prog_location,"./Documents/mini_project/b1.png")
        global _img6
        _img6 = tk.PhotoImage(file=photo_location)
        self.Label6.configure(image=_img6)
        self.Label6.configure(text='''Label''')

        self.Label7 = tk.Label(top)
        self.Label7.place(relx=0.438, rely=0.183, height=21, width=119)
        self.Label7.configure(font=font14)
        self.Label7.configure(text='''Album Name :''')

        self.Label8 = tk.Label(top)
        self.Label8.place(relx=0.438, rely=0.283, height=21, width=119)
        self.Label8.configure(text='''Album ID :''')

        self.Label9 = tk.Label(top)
        self.Label9.place(relx=0.438, rely=0.333, height=21, width=119)
        self.Label9.configure(text='''Publisher :''')

        self.Labe20 = tk.Label(top)
        self.Labe20.place(relx=0.438, rely=0.385, height=21, width=119)
        self.Labe20.configure(text='''Category :''')
       
        self.Text1 = tk.Text(top)
        self.Text1.place(relx=0.439, rely=0.500, relheight=0.39, relwidth=0.246)
        self.Text1.configure(background="white")
        self.Text1.configure(borderwidth="5")
        self.Text1.configure(font="font10")
        self.Text1.configure(selectbackground="#c4c4c4")
        self.Text1.configure(wrap="word")

        self.Button6 = tk.Button(top)
        self.Button6.place(relx=0.745, rely=0.93, height=31, width=131)
        self.Button6.configure(text='''CLOSE''')
        self.Button6.configure(background="#f7ebc3")
        self.Button6.configure(borderwidth="3") 
        def doSomething():
            if mb.askyesno('Verify', 'Really quit?'):
                top.destroy()
            else:
                mb.showinfo('No', 'quit has been cancelled')
        
        self.Button6.configure(command=lambda: doSomething())

        self.Button8 = tk.Button(top)
        self.Button8.place(relx=0.585, rely=0.93, height=31, width=131)
        self.Button8.configure(text='''Logout''')
        self.Button8.configure(background="#f7ebc3")
        self.Button8.configure(borderwidth="3")
        self.Button8.configure(command=lambda:logout(self)) 

        self.Button7 = tk.Button(top)
        self.Button7.place(relx=0.425, rely=0.93, height=31, width=131)
        self.Button7.configure(text='''CLEAR''')
        self.Button7.configure(background="#f7ebc3")
        self.Button7.configure(borderwidth="3") 
        def clearDetails(self):
        	self.Entry1.delete(0,tk.END)
        	self.Entry2.delete(0,tk.END)
        	self.Entry3.delete(0,tk.END)
        	self.Entry4.delete(0,tk.END)
        	self.Entry5.delete(0,tk.END)

        self.Button7.configure(command=lambda:clearDetails(self))	


if __name__ == '__main__':
    vp_start_gui()





