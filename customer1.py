#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.25.1
#  in conjunction with Tcl version 8.6
#    May 26, 2020 05:31:53 PM IST  platform: Linux

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import customer1_support
import os.path
import os
from tkinter import StringVar
from tkinter import messagebox as mb 
from tkinter import StringVar

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    root = tk.Tk()
    customer1_support.set_Tk_var()
    top = Toplevel1 (root)
    customer1_support.init(root, top)
    root.mainloop()

w = None

def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    rt = root
    w = tk.Toplevel (root)
    customer1_support.set_Tk_var()
    top = Toplevel1 (w)
    customer1_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

def paygo(self):
	root.destroy()
	import payment
	payment.vp_start_gui()

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font10 = "-family {DejaVu Sans} -size 11 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("920x479+192+153")
        top.title("User View")   
        top.configure(background="#916d5b")
        top.configure(highlightcolor="#aaaaaa")

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=-0.011, rely=0.0, height=51, width=929)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(background="#684739")
        self.Label2.configure(font="-family {Century Schoolbook L} -size 18 -weight bold")
        self.Label2.configure(foreground="#ffffff")
        self.Label2.configure(text='''Album Store''')

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.348, rely=0.146, height=31, width=259)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(background="#916d5b")
        self.Label3.configure(font="-family {Century Schoolbook L} -size 19 -weight bold -underline 1")
        self.Label3.configure(foreground="#ffffff")
        self.Label3.configure(text='''Customer Pannel''')

        self.Labelframe1 = tk.LabelFrame(top)
        self.Labelframe1.place(relx=0.522, rely=0.23, relheight=0.553
                , relwidth=0.359)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(borderwidth="6")
        self.Labelframe1.configure(text='''Books''')
        self.Labelframe1.configure(background="#916d5b",foreground="#ffffff")

        self.Text1 = tk.Text(self.Labelframe1)
        self.Text1.place(relx=0.03, rely=0.113, relheight=0.808, relwidth=0.594
                , bordermode='ignore')
        self.Text1.configure(font="TkTextFont")
        self.Text1.configure(selectbackground="#c4c4c4")
        self.Text1.configure(wrap="word")

        self.Listbox1 = tk.Listbox(self.Labelframe1)
        self.Listbox1.place(relx=0.636, rely=0.113, relheight=0.815
                , relwidth=0.315, bordermode='ignore')
        self.Listbox1.configure(disabledforeground="#fffafa")
        self.Listbox1.configure(font="TkFixedFont")
        self.Listbox1.configure(selectbackground="#c4c4c4")

        def showCust(event):
            
            y=self.Listbox1.curselection()[0]
            file=self.Listbox1.get(y)
            from os.path import join as pjoin
            pathfile=pjoin("/","home","lakshmi","Documents","mini_project","customers/"+file)
            with open(pathfile,'r') as file:
                file=file.read()

            self.Text1.delete('1.0',tk.END)
            self.Text1.insert(tk.END,file)
        
        def viewcust(self):
           
            self.Listbox1.delete(0,tk.END)
            flist=os.listdir('/home/lakshmi/Documents/mini_project/customers/')    
            for list in flist:
                self.Listbox1.insert(tk.END,list)
            self.Listbox1.bind("<<ListboxSelect>>",showCust)

        self.Button8 = tk.Button(top)
        self.Button8.place(relx=0.685, rely=0.814, height=31, width=153)
        self.Button8.configure(activebackground="#f9f9f9")
        self.Button8.configure(background="#d1a388")
        self.Button8.configure(text='''View Added customer''')
        self.Button8.configure(command=lambda:viewcust(self))

        self.Button1 = tk.Button(top)
        self.Button1.place(relx=0.530, rely=0.814, height=31, width=143)
        self.Button1.configure(activebackground="#f9f9f9")
        self.Button1.configure(background="#d1a388")
        self.Button1.configure(text='''View All Books''')

        def showall(event):
            category=self.cat.get()
            x=self.Listbox1.curselection()[0]
            file=self.Listbox1.get(x)
            from os.path import join as pjoin
            pathfile=pjoin("/","home","lakshmi","Documents","mini_project","bookhouse/"+category+"/"+file)
            with open(pathfile,'r') as file:
                file=file.read()

            self.Text1.delete('1.0',tk.END)
            self.Text1.insert(tk.END,file)
        self.Listbox1.bind("<<ListboxSelect>>",showall)
        
        def viewallData(self):
            self.Listbox1.delete(0,tk.END)
            flist=os.listdir('/home/lakshmi/Documents/mini_project/bookhouse/')
            for item in flist:
                self.Listbox1.insert(tk.END,item)

        def showCon(event):
            y=self.Listbox1.curselection()[0]
            file=self.Listbox1.get(y)
            from os.path import join as pjoin
            pathfile=pjoin("/","home","lakshmi","Documents","mini_project","bookhouse/"+file)
            with open(pathfile,'r') as file:
                file=file.read()

            self.Text1.delete('1.0',tk.END)
            self.Text1.insert(tk.END,file)
        self.Listbox1.bind("<<ListboxSelect>>",showCon)
                                                      
        self.Button1.configure(command=lambda:viewallData(self))

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.88, rely=0.104, height=431, width=109)
        self.Label1.configure(activebackground="#f9f9f9")
        photo_location = os.path.join(prog_location,"./Documents/mini_project/c5.png")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.Label1.configure(image=_img0)
        self.Label1.configure(text='''Label''')

        self.Label6 = tk.Label(top)
        self.Label6.place(relx=0.0, rely=0.104, height=441, width=99)
        self.Label6.configure(activebackground="#f9f9f9")
        photo_location = os.path.join(prog_location,"./Documents/mini_project/c5.png")
        global _img1
        _img1 = tk.PhotoImage(file=photo_location)
        self.Label6.configure(image=_img1)
        self.Label6.configure(text='''Label''')

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.13, rely=0.251, relheight=0.741, relwidth=0.375)

        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="4")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#916d5b")

        self.Label4 = tk.Label(self.Frame1)
        self.Label4.place(relx=0.029, rely=0.045, height=21, width=119)
        self.Label4.configure(background="#916d5b",foreground="#ffffff")
        self.Label4.configure(text='''Customer ID  :''')
        
        self.Label11 = tk.Label(self.Frame1)
        self.Label11.place(relx=0.029, rely=0.140, height=21, width=109)
        self.Label11.configure(background="#916d5b",foreground="#ffffff")
        self.Label11.configure(text='''  Book Name   :''')

        self.Label5 = tk.Label(self.Frame1)
        self.Label5.place(relx=0.029, rely=0.240, height=21, width=117)
        self.Label5.configure(background="#916d5b",foreground="#ffffff")
        self.Label5.configure(text='''Category       :''')

        self.Label7 = tk.Label(self.Frame1)
        self.Label7.place(relx=0.058, rely=0.345, height=21, width=97)
        self.Label7.configure(background="#916d5b",foreground="#ffffff")
        self.Label7.configure(text='''Book ID         :''')

        self.Label8 = tk.Label(self.Frame1)
        self.Label8.place(relx=0.029, rely=0.445, height=21, width=107)
        self.Label8.configure(background="#916d5b",foreground="#ffffff")
        self.Label8.configure(text='''Book Copies   :''')

        self.Label9 = tk.Label(self.Frame1)
        self.Label9.place(relx=0.029, rely=0.545, height=21, width=126)
        self.Label9.configure(background="#916d5b",foreground="#ffffff")
        self.Label9.configure(text='''Price          :''')

        self.Label10 = tk.Label(self.Frame1)
        self.Label10.place(relx=0.058, rely=0.648, height=21, width=107)
        self.Label10.configure(background="#916d5b",foreground="#ffffff")
        self.Label10.configure(text='''Total          :''')

        self.Entry1 = tk.Entry(self.Frame1)
        self.Entry1.place(relx=0.406, rely=0.045,height=23, relwidth=0.51)
        self.Entry1.configure(background="white",cursor="circle")
        self.Entry1.configure(font="TkFixedFont")
        self.value=StringVar()
        self.value=1000
        self.Entry1.configure(textvariable=self.value)
        self.i=1        	
        y=os.listdir('/home/lakshmi/Documents/mini_project/customers')
        for v in y:
        	self.i=self.i+1
        self.z=self.value+self.i	
        self.Entry1.insert(0,self.z)

        self.Entry7 = tk.Entry(self.Frame1)
        self.Entry7.place(relx=0.406, rely=0.145,height=23, relwidth=0.51)
        self.Entry7.configure(background="white")
        self.Entry7.configure(font="TkFixedFont")

        self.Entry3 = tk.Entry(self.Frame1)
        self.Entry3.place(relx=0.406, rely=0.340,height=23, relwidth=0.307)
        self.Entry3.configure(background="white")
        self.Entry3.configure(font="TkFixedFont")

        self.Entry4 = tk.Entry(self.Frame1)
        self.Entry4.place(relx=0.406, rely=0.440,height=23, relwidth=0.51)
        self.Entry4.configure(background="white",cursor="pencil")
        self.Entry4.configure(font="TkFixedFont")

        self.Labelp=tk.Label(self.Frame1)
        self.Labelp.place(relx=0.406, rely=0.544, height=23, width=175)
        self.Labelp.configure(background="#cccccc")
        self.Labelp.configure(text='''300/-''')        

        def showCat(event):
            category=self.cat.get()
            x=self.Listbox1.curselection()[0]
            file=self.Listbox1.get(x)
            from os.path import join as pjoin
            pathfile=pjoin("/","home","lakshmi","Documents","mini_project/"+category+"/"+file)
            with open(pathfile,'r') as file:
                file=file.read()

            self.Text1.delete('1.0',tk.END)
            self.Text1.insert(tk.END,file)
        
        def listcat(self):
            category=self.cat.get()
            self.Listbox1.delete(0,tk.END)
            flist=os.listdir('/home/lakshmi/Documents/mini_project/'+category+"/")    
            for list in flist:
                self.Listbox1.insert(tk.END,list)
            self.Listbox1.bind("<<ListboxSelect>>",showCat)    
        
        self.TCombobox1 = ttk.Combobox(self.Frame1)
        self.TCombobox1.place(relx=0.406, rely=0.240, relheight=0.059
                , relwidth=0.31)
        self.TCombobox1.configure(textvariable=customer1_support.combobox)
        self.cat=StringVar()
        self.TCombobox1.configure(takefocus="",textvariable=self.cat)
        self.category=["fiction","novels","education"]
        self.TCombobox1.configure(values=self.category)

        self.Button2 = tk.Button(self.Frame1)
        self.Button2.place(relx=0.725, rely=0.240, height=21, width=61)
        self.Button2.configure(background="#d1a388")
        self.Button2.configure(text='''Search''')
        self.Button2.configure(command=lambda:listcat(self))

        def searchid(self):
            bookid=self.Entry3.get()+".txt"
            self.Listbox1.delete(0,tk.END)
            flist=os.listdir('/home/lakshmi/Documents/mini_project/bookhouse/')
            if bookid not in flist:
                mb.showinfo(title="Error",message="Data not found!!")
            else:    

                for list in flist:
                    if list==bookid:
                        self.Listbox1.insert(tk.END,list)

        self.Button3 = tk.Button(self.Frame1)
        self.Button3.place(relx=0.725, rely=0.345, height=21, width=61)
        self.Button3.configure(background="#d1a388")
        self.Button3.configure(text='''Search''')
        self.Button3.configure(command=lambda:searchid(self))

        def purchaseb(self):
        		
        	cid=self.Entry1.get()
        	sum=int(self.Entry4.get())*300
        	self.total.set(sum)
        	first=cid[0:10]+".txt"
        	from os.path import join as pjoin
        	ptf=pjoin("/","home","lakshmi","Documents","mini_project","customers",first)
        	with open(ptf,"w") as wr:
        		wr.write("Customer ID: "+str(self.Entry1.get())+"\n"+"Category: "+str(self.cat.get())
        			+"\n"+"Book Name: "+str(self.Entry7.get())
                    +"\n"+"Book ID: "+str(self.Entry3.get())+"\n"+"Book Copies: "+str(self.Entry4.get())
                    +"\n"+"Total: "+str(self.Entryt.get()))
        		wr.close()

        self.Button4 = tk.Button(self.Frame1)
        self.Button4.place(relx=0.145, rely=0.873, height=31, width=241)
        self.Button4.configure(background="#d1a388")
        self.Button4.configure(text='''Add Book for Purchase''')
        self.Button4.configure(command=lambda:purchaseb(self))

        self.Button5 = tk.Button(self.Frame1)
        self.Button5.place(relx=0.145, rely=0.761, height=31, width=91)
        self.Button5.configure(background="#d1a388")
        self.Button5.configure(text='''Reset''')
        def cleardata(self):
        	self.Entry1.delete(0,tk.END)
        	self.Entryt.delete(0,tk.END)        	
        	self.Entry7.delete(0,tk.END)
        	self.TCombobox1.delete(0,tk.END)
        	self.Entry3.delete(0,tk.END)
        	self.Entry4.delete(0,tk.END)
        	y=os.listdir('/home/lakshmi/Documents/mini_project/customers')
        	self.i=1
        	for v in y:
        			self.i=self.i+1
        	self.z=self.value+self.i	
        	self.Entry1.insert(0,self.z)	
        self.Button5.configure(command=lambda:cleardata(self)) 	
       	
        self.Entryt = tk.Entry(top)
        self.Entryt.place(relx=0.283, rely=0.720, relheight=0.05, relwidth=0.19)
        self.Entryt.configure(background="#000000")
        self.Entryt.configure(font="TkTextFont",foreground="#000000")
        self.Entryt.configure(state='readonly',cursor="X_cursor")
        self.Entryt.configure(selectbackground="#c4c4c4")
        
        self.total=StringVar()
        self.Entryt.configure(textvariable=self.total)
        
        self.Button7 = tk.Button(self.Frame1)
        self.Button7.place(relx=0.58, rely=0.761, height=31, width=91)
        self.Button7.configure(background="#d1a388")
        self.Button7.configure(text='''Delete''')
        def deletecust(self):
            import os
            deletfile=self.Entry1.get()
            os.remove('/home/lakshmi/Documents/mini_project/customers/'+deletfile+'.txt')
            print("data deleted!!")
            mb.showinfo(title="Deta Deletion",message="Data Deleted!!")
        self.Button7.configure(command=lambda : deletecust(self))

        self.Button6 = tk.Button(top)
        self.Button6.place(relx=0.578, rely=0.898, height=31, width=221)
        self.Button6.configure(background="#684739")
        self.Button6.configure(borderwidth="3")
        self.Button6.configure(font=font10)
        self.Button6.configure(foreground="#ffffff")
        self.Button6.configure(text='''Go For Payment''')
        self.Button6.configure(command=lambda:paygo(self))

if __name__ == '__main__':
    vp_start_gui()





